BEGIN
    UPDATE `OrderData.RawOrderDetailsStaging` a 
    SET SOURCE_LATITUDE = (SELECT MIN(SOURCE_LATITUDE) FROM `OrderData.TimeZoneFetch` b WHERE b.SOURCE_CITY =a.SOURCE_CITY AND b.SOURCE_POSTALCODE = a.SOURCE_POSTALCODE
    AND b.SOURCE_COUNTRY = a.SOURCE_COUNTRY AND SOURCE_LATITUDE IS NOT NULL),
    SOURCE_LONGITUDE = (SELECT MIN(SOURCE_LONGITUDE) FROM `OrderData.TimeZoneFetch` b WHERE b.SOURCE_CITY =a.SOURCE_CITY AND b.SOURCE_POSTALCODE = a.SOURCE_POSTALCODE
    AND b.SOURCE_COUNTRY = a.SOURCE_COUNTRY AND SOURCE_LATITUDE IS NOT NULL)
    WHERE a.SOURCE_LATITUDE IS NULL OR a.SOURCE_LATITUDE ='\\N' OR a.SOURCE_LONGITUDE IS NULL OR a.SOURCE_LONGITUDE ='\\N';

    UPDATE `OrderData.RawOrderDetailsStaging` a 
    SET TIMEZONE = (SELECT MIN(TIMEZONE) FROM `OrderData.TimeZoneFetch` b WHERE b.SOURCE_LONGITUDE = a.SOURCE_LONGITUDE
    AND b.SOURCE_LATITUDE = a.SOURCE_LATITUDE)
    WHERE a.TIMEZONE IS NULL;

    UPDATE `OrderData.RawOrderDetailsStaging`
    SET ORDER_LINE_CREATED_TIMESTAMP = TIMESTAMP(SUBSTR(STRING(ORDER_LINE_CREATED_TIMESTAMP,TIMEZONE),1,INSTR(STRING(ORDER_LINE_CREATED_TIMESTAMP,TIMEZONE),'-',-1)-1)),
    FULFILLMENT_DATE = SAFE_CAST(TIMESTAMP(SUBSTR(STRING(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),TIMEZONE),1,INSTR(STRING(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),TIMEZONE),'-',-1)-1)) AS STRING),
    RELEASE_TIMESTAMP = SAFE_CAST(TIMESTAMP(SUBSTR(STRING(SAFE_CAST(RELEASE_TIMESTAMP AS TIMESTAMP),TIMEZONE),1,
    INSTR(STRING(SAFE_CAST(RELEASE_TIMESTAMP AS TIMESTAMP),TIMEZONE),'-',-1)-1)) AS STRING),
    ALLOCATION_TIMESTAMP = SAFE_CAST(TIMESTAMP(SUBSTR(STRING(SAFE_CAST(ALLOCATION_TIMESTAMP AS TIMESTAMP),TIMEZONE),1,
    INSTR(STRING(SAFE_CAST(ALLOCATION_TIMESTAMP AS TIMESTAMP),TIMEZONE),'-',-1)-1)) AS STRING)
    WHERE TIMEZONE IS NOT NULL;

    UPDATE `OrderData.RawOrderDetailsStaging`
    SET ORG_ID ='GroupDynamite'
    WHERE ORG_ID IN ('CAN','US');

    UPDATE `OrderData.RawOrderDetailsStaging`
    SET ORG_ID ='Michaels'
    WHERE ORG_ID NOT IN ('GroupDynamite','Michaels');

    INSERT INTO `OrderData.RawOrderDetailsMaster`
    SELECT * FROM `OrderData.RawOrderDetailsStaging`;

    TRUNCATE TABLE `OrderData.RawOrderDetailsStaging`;

    CREATE TEMPORARY TABLE rawcap
    AS
    WITH ordercreatefulfill AS
    (SELECT count(ORDER_ID) ordercount,0 fulfillcount,ORG_ID,LOCATION,LOCATION_TYPE_ID,
    EXTRACT(DAYOFWEEK FROM ORDER_LINE_CREATED_TIMESTAMP) EVENT_DAY_OF_WEEK,FORMAT_TIMESTAMP('%Y-%U',ORDER_LINE_CREATED_TIMESTAMP) EVENT_YEAR_WEEK,
    CASE WHEN EXTRACT(HOUR FROM TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR)) = 23 THEN TIMESTAMP_ADD(TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR),INTERVAL 58 MINUTE) 
    ELSE TIMESTAMP_ADD(TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR),INTERVAL 60 MINUTE) END QUERY_TIME
    FROM `OrderData.RawOrderDetailsMaster`
    /*WHERE LOCATION ='xxxx'
    AND DATE(ORDER_LINE_CREATED_TIMESTAMP) >= '2019-03-14'
    AND DATE(ORDER_LINE_CREATED_TIMESTAMP) <= '2019-03-18'*/
    GROUP BY ORG_ID,LOCATION,LOCATION_TYPE_ID,
    EXTRACT(DAYOFWEEK FROM ORDER_LINE_CREATED_TIMESTAMP),FORMAT_TIMESTAMP('%Y-%U',ORDER_LINE_CREATED_TIMESTAMP),CASE WHEN EXTRACT(HOUR FROM TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR)) = 23 THEN TIMESTAMP_ADD(TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR),INTERVAL 58 MINUTE) 
    ELSE TIMESTAMP_ADD(TIMESTAMP_TRUNC(ORDER_LINE_CREATED_TIMESTAMP,HOUR),INTERVAL 60 MINUTE) END
    UNION DISTINCT
    SELECT 0 ordercount,count(ORDER_ID) fulfillcount,ORG_ID,LOCATION,LOCATION_TYPE_ID, 
    EXTRACT(DAYOFWEEK FROM SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)) EVENT_DAY_OF_WEEK,FORMAT_TIMESTAMP('%Y-%U',SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)) EVENT_YEAR_WEEK,
    CASE WHEN EXTRACT(HOUR FROM TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR)) = 23 THEN TIMESTAMP_ADD(TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR),INTERVAL 59 MINUTE) 
    ELSE TIMESTAMP_ADD(TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR),INTERVAL 61 MINUTE) END QUERY_TIME
    FROM `OrderData.RawOrderDetailsMaster`
    WHERE FULFILLMENT_DATE NOT LIKE '%\\N%'
    /*AND LOCATION ='3755'
    AND DATE(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)) >= '2019-03-14'
    AND DATE(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)) <= '2019-03-18'*/
    GROUP BY ORG_ID,LOCATION,LOCATION_TYPE_ID,
    EXTRACT(DAYOFWEEK FROM SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)),FORMAT_TIMESTAMP('%Y-%U',SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP)),CASE WHEN EXTRACT(HOUR FROM TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR)) = 23 THEN TIMESTAMP_ADD(TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR),INTERVAL 59 MINUTE) 
    ELSE TIMESTAMP_ADD(TIMESTAMP_TRUNC(SAFE_CAST(FULFILLMENT_DATE AS TIMESTAMP),HOUR),INTERVAL 61 MINUTE) END
    ORDER BY QUERY_TIME),
    maxcapacity AS
    (SELECT ORG_ID,LOCATION_ID,MAX(SAFE_CAST(MAX_CAPACITY_UTILIZED AS FLOAT64)) MAX_CAPACITY_UTILIZED
    FROM `OrderData.RawCapacityUtilization`
    WHERE MAX_CAPACITY_UTILIZED NOT LIKE '%\\N%'
    GROUP BY ORG_ID,LOCATION_ID),
    rawcapacity AS
    (SELECT oc.ORG_ID ORG_ID,oc.LOCATION LOCATION_ID,oc.LOCATION_TYPE_ID LOCATION_TYPE_ID,
    oc.EVENT_YEAR_WEEK YEAR_WEEK,oc.EVENT_DAY_OF_WEEK DAY_OF_WEEK,oc.ordercount ORDER_COUNT,oc.fulfillcount FULFILL_COUNT,
    oc.QUERY_TIME, SUM(oc.ordercount) OVER (
        PARTITION BY oc.ORG_ID,oc.LOCATION_TYPE_ID,oc.LOCATION,oc.EVENT_YEAR_WEEK,oc.EVENT_DAY_OF_WEEK
        ORDER BY oc.QUERY_TIME
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS TOTAL_CAPACITY_UTILIZED,MAX_CAPACITY_UTILIZED ,
      SUM(oc.ordercount-oc.fulfillcount) OVER (
        PARTITION BY oc.ORG_ID,oc.LOCATION_TYPE_ID,oc.LOCATION
        ORDER BY oc.QUERY_TIME
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CURRENT_BACKLOG
    FROM ordercreatefulfill oc 
    LEFT JOIN maxcapacity mc ON oc.ORG_ID = mc.ORG_ID AND oc.LOCATION = mc.LOCATION_ID)
    SELECT ORG_ID,LOCATION_ID,LOCATION_TYPE_ID,QUERY_TIME,DAY_OF_WEEK,YEAR_WEEK,MAX_CAPACITY_UTILIZED,ORDER_COUNT,FULFILL_COUNT,CURRENT_BACKLOG,
    null MAX_BACKLOG, 
    COALESCE(TOTAL_CAPACITY_UTILIZED,CURRENT_BACKLOG) TOTAL_CAPACITY_UTILIZED,CASE WHEN LAST_VALUE(CURRENT_BACKLOG)
    OVER (PARTITION BY ORG_ID,LOCATION_TYPE_ID,LOCATION_ID,YEAR_WEEK,DAY_OF_WEEK
        ORDER BY QUERY_TIME ASC,CURRENT_BACKLOG DESC
        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) < 0 THEN 0 ELSE
    LAST_VALUE(CURRENT_BACKLOG)
    OVER (PARTITION BY ORG_ID,LOCATION_TYPE_ID,LOCATION_ID,YEAR_WEEK,DAY_OF_WEEK
        ORDER BY QUERY_TIME ASC,CURRENT_BACKLOG DESC
        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) END   LAST_BACKLOG_FOR_THE_DAY
    FROM rawcapacity 
    ORDER BY LOCATION_ID,QUERY_TIME;

    UPDATE rawcap a
    SET TOTAL_CAPACITY_UTILIZED =
    TOTAL_CAPACITY_UTILIZED + 
    COALESCE((SELECT DISTINCT COALESCE(LAST_BACKLOG_FOR_THE_DAY,0) 
    FROM rawcap WHERE ORG_ID = a.ORG_ID AND LOCATION_ID = a.LOCATION_ID AND LOCATION_TYPE_ID =a.LOCATION_TYPE_ID
    AND EXTRACT(DATE FROM QUERY_TIME) = DATE_SUB(EXTRACT(DATE FROM a.QUERY_TIME),INTERVAL 1 DAY)),0)
    WHERE TOTAL_CAPACITY_UTILIZED >=0;

    CREATE OR REPLACE TABLE `OrderData.RawCapacityUtilization1`
    AS SELECT * FROM `OrderData.RawCapacityUtilization`;

    TRUNCATE TABLE `OrderData.RawCapacityUtilization`;

    INSERT INTO `OrderData.RawCapacityUtilization`
    (ORG_ID,LOCATION_ID,LOCATION_TYPE_ID,QUERY_TIME,DAY_OF_WEEK,YEAR_WEEK,MAX_CAPACITY_UTILIZED,CURRENT_BACKLOG,MAX_BACKLOG,TOTAL_CAPACITY_UTILIZED)
    SELECT ORG_ID,LOCATION_ID,LOCATION_TYPE_ID,QUERY_TIME,DAY_OF_WEEK,YEAR_WEEK,COALESCE(CAST(MAX_CAPACITY_UTILIZED AS STRING),'\\N'),MIN(CURRENT_BACKLOG),COALESCE(CAST(MAX_BACKLOG AS STRING),'\\N'),
    MAX(TOTAL_CAPACITY_UTILIZED)
    FROM rawcap
    GROUP BY ORG_ID,LOCATION_ID,LOCATION_TYPE_ID,QUERY_TIME,DAY_OF_WEEK,YEAR_WEEK,COALESCE(CAST(MAX_CAPACITY_UTILIZED AS STRING),'\\N'),COALESCE(CAST(MAX_BACKLOG AS STRING),'\\N');

END