{"REGION" : "us-east1",
 "DATAPROC_LOGS":"dataproclogs",
 "MACHINE_TYPE" : "n1-standard-4", 
 "ZONE" : "us-east1-b",
 "BOOT_DISK_TYPE" : "pd-ssd",
 "BOOT_DISK_SIZE" : "500",
 "NUMBER_OF_WORKERS" : "2",
 "IMAGE_VERSION" : "2.0-debian10",
 "SERVICE_ACCOUNT" : "gcpproject1-sa@gcpproject1.iam.gserviceaccount.com",
 "MAX_IDLE_TIME" : "1800s",
 "PROJECT" : "gcpproject1",
 "FUSION_INSTANCE_NAME":"mlinstance",
 "FUSION_INSTANCE_URL":"https://datafusion.googleapis.com/v1beta1/projects/",
 "FUSION_PAYLOAD" : {"description":"ml cloud fusion instance",
                    "type":"BASIC",
                    "enableStackdriverLogging": "true",
                    "dataprocServiceAccount": "gcpproject1-sa@gcpproject1.iam.gserviceaccount.com" },
 "DATAPROC_CLUSTER_NAME" : "mldataproccluster",
 "DATAPROC_PROFILE_FILE" :"existingclusterprofile.json",
 "PIPELINE_FILE":"shipDateEstimationPipeline.json",
 "PREFERENCE_JSON" :{"system.profile.name": "USER:mldataproccluster"},
 "NAMESPACE" : "default",
 "PIPELINE_NAME" : "FulfilmentDateEstimation",
 "BIGQUERY_CONNECTOR" : "1.2.0",
 "SPARK_BIGQUERY_CONNECTOR" : "0.20.0",
 "REMOTE_EXECUTION_FILE_PATH" : "gs://reusableparameters/ShipDateEstimation/remoteExecutionScript/*",
 "METADATA_PARAMETER_1" : "remoteExecutionFilePath",
 "USER_NAME" : "seetharengaraman",
 "METADATA_PARAMETER_2" : "userName",
 "KEY_SAVE_PATH" : "gs://clusterstartupscripts",
 "METADATA_PARAMETER_3" : "keySavePath",
 "METADATA_PARAMETER_4" : "dataOriginPath",
 "DATA_DESTINATION_PATH" : "gs://inbounddata",
 "METADATA_PARAMETER_5" : "dataDestinationPath",
 "DATA_ARCHIVE_PATH" : "gs://mldataarchivefiles",
 "METADATA_PARAMETER_6" : "dataArchivePath",
 "PIPELINE_INPUT_PATH" : "gs://inbounddata/*o_SHIP*20210811*",
 "PIPELINE_WRANGLER_ERROR_PATH" : "gs://inbounddata/errorcsv",
 "PIPELINE_BIGQUERY_DATASET" : "OrderData",
 "PIPELINE_BIGQUERY_STAGING_TABLE" : "RawOrderDetailsStaging",
 "PIPELINE_BIGQUERY_DATA_LOCATION" : "US",
 "PIPELINE_BIGQUERY_VALIDATE_TIME_ZONE" : "BEGIN\nUPDATE `OrderData.RawOrderDetailsStaging` b\nSET SOURCE_LATITUDE = (SELECT MIN(SOURCE_LATITUDE) FROM `OrderData.TimeZoneFetch` a WHERE a.SOURCE_COUNTRY = b.SOURCE_COUNTRY \nAND a.SOURCE_POSTALCODE = b.SOURCE_POSTALCODE AND SOURCE_LATITUDE IS NOT NULL AND SOURCE_LATITUDE <> '\\\\N' GROUP BY SOURCE_POSTALCODE,SOURCE_COUNTRY),\n    SOURCE_LONGITUDE = (SELECT MIN(SOURCE_LONGITUDE) FROM `OrderData.TimeZoneFetch` a WHERE a.SOURCE_COUNTRY = b.SOURCE_COUNTRY \nAND a.SOURCE_POSTALCODE = b.SOURCE_POSTALCODE AND SOURCE_LONGITUDE IS NOT NULL AND SOURCE_LONGITUDE <> '\\\\N' GROUP BY SOURCE_POSTALCODE,SOURCE_COUNTRY),\n    TIMEZONE = (SELECT MIN(TIMEZONE) FROM `OrderData.TimeZoneFetch` a WHERE a.SOURCE_COUNTRY = b.SOURCE_COUNTRY \nAND a.SOURCE_POSTALCODE = b.SOURCE_POSTALCODE AND TIMEZONE IS NOT NULL AND TIMEZONE <> '\\\\N' GROUP BY SOURCE_POSTALCODE,SOURCE_COUNTRY)\nWHERE (SOURCE_LATITUDE ='\\\\N' OR SOURCE_LONGITUDE ='\\\\N' OR TIMEZONE ='\\\\N') OR (SOURCE_LONGITUDE IS NULL OR SOURCE_LATITUDE IS NULL OR TIMEZONE IS NULL) ;\n\nINSERT INTO `OrderData.TimeZoneFetch`\n(SOURCE_CITY, SOURCE_COUNTRY, SOURCE_POSTALCODE, SOURCE_LONGITUDE,SOURCE_LATITUDE)\nSELECT DISTINCT SOURCE_CITY, SOURCE_COUNTRY, SOURCE_POSTALCODE,CASE WHEN SOURCE_LONGITUDE ='\\\\N' THEN NULL ELSE SOURCE_LONGITUDE END,\nCASE WHEN SOURCE_LATITUDE ='\\\\N' THEN NULL ELSE SOURCE_LATITUDE END\nFROM `OrderData.RawOrderDetailsStaging` a \nWHERE NOT EXISTS\n(SELECT * FROM `OrderData.TimeZoneFetch` WHERE SOURCE_CITY = a.SOURCE_CITY AND SOURCE_COUNTRY = a.SOURCE_COUNTRY\nAND SOURCE_POSTALCODE =a.SOURCE_POSTALCODE);\n\nUPDATE `OrderData.TimeZoneFetch`\nSET POSTALCODE_CORRECTED = CASE WHEN SOURCE_COUNTRY = 'CA' AND LENGTH(TRIM(SOURCE_POSTALCODE)) = 6 \n                             THEN SUBSTRING(TRIM(SOURCE_POSTALCODE),1,3)||' '||SUBSTRING(TRIM(SOURCE_POSTALCODE),4,3)\n                             ELSE TRIM(SOURCE_POSTALCODE) END\nWHERE POSTALCODE_CORRECTED IS NULL;\nEND;",
 "PIPELINE_REMOTE_COMMAND" : "bash /home/wrapper_install_dependencies.sh shipDateEstimation > output.log",
 "PIPELINE_BIGQUERY_TRANSFORMATION" : "CALL `OrderData.TransformRawOrderData`();\nCALL `OrderData.PrepareTestDataForPrediction`();",
 "PIPELINE_MODEL_EVALUATE" : "DECLARE RECORD_COUNT INT64;\nBEGIN\n    SET RECORD_COUNT = (SELECT count(1) RECORD_COUNT FROM `OrderData.Predictions`);\n    WITH prediction_result AS\n    (SELECT COUNT(1) ROW_COUNT, ABS(PREDICT_LABEL_IN_DAYS - ACTUAL_LABEL_IN_DAYS) PREDICT_ACTUAL_DIFF_IN_DAYS,ROUND((COUNT(1)/RECORD_COUNT ) * 100,2) PERCENT_MATCHING\n    FROM `OrderData.Predictions` \n    WHERE ABS(PREDICT_LABEL_IN_DAYS - ACTUAL_LABEL_IN_DAYS) < 20\n    GROUP BY PREDICT_ACTUAL_DIFF_IN_DAYS\n    ORDER BY PERCENT_MATCHING DESC)\n    SELECT SUM(PERCENT_MATCHING) match_percent\n    FROM prediction_result \n    WHERE PREDICT_ACTUAL_DIFF_IN_DAYS < 3;\nEND;"
}